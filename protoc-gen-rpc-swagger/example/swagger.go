/*
 * Copyright 2024 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by thrift-gen-rpc-swagger.
package main

import (
	"context"
	"embed"
	_ "embed"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"sync"

	"github.com/bytedance/gopkg/cloud/metainfo"
	dproto "github.com/cloudwego/dynamicgo/proto"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	"github.com/cloudwego/kitex/pkg/transmeta"
	"github.com/cloudwego/kitex/transport"
	"github.com/emicklei/proto"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/swagger"
	swaggerFiles "github.com/swaggo/files"
)

//go:embed openapi.yaml
var files embed.FS

type ClientPool struct {
	serviceMap map[string]genericclient.Client
	mutex      sync.RWMutex
}

func NewClientPool(protoFiles []string) *ClientPool {
	clientPool := &ClientPool{
		serviceMap: make(map[string]genericclient.Client),
	}

	for _, protoFile := range protoFiles {
		filePath, err := findPbFile(protoFile)
		if err != nil {
			hlog.Fatalf("Error finding proto file: %v", err)
		}

		err = clientPool.GetServicesFromIDL(filePath)
		if err != nil {
			hlog.Fatalf("Error loading protobuf files from directory: %v", err)
		}
	}

	return clientPool
}

func newClient(pbFilePath, svcName string) genericclient.Client {
	dOpts := dproto.Options{}
	p, err := generic.NewPbFileProviderWithDynamicGo(pbFilePath, context.Background(), dOpts)
	if err != nil {
		hlog.Fatalf("Failed to create protobufFileProvider for %s: %v", svcName, err)
	}

	g, err := generic.JSONPbGeneric(p)
	if err != nil {
		hlog.Fatalf("Failed to create JSONPbGeneric for %s: %v", svcName, err)
	}

	cli, err := genericclient.NewClient(svcName, g,
		client.WithTransportProtocol(transport.TTHeader),
		client.WithMetaHandler(transmeta.ClientTTHeaderHandler),
		client.WithHostPorts("127.0.0.1:8888"),
	)
	if err != nil {
		hlog.Fatalf("Failed to create generic client for %s: %v", svcName, err)
	}

	return cli
}

func (cp *ClientPool) getClient(svcName string) (genericclient.Client, error) {
	cp.mutex.RLock()
	defer cp.mutex.RUnlock()

	client, ok := cp.serviceMap[svcName]
	if !ok {
		return nil, errors.New("service not found: " + svcName)
	}
	return client, nil
}

func (cp *ClientPool) GetServicesFromIDL(idlPath string) error {
	reader, err := os.Open(idlPath)
	if err != nil {
		return fmt.Errorf("failed to open proto file: %w", err)
	}
	defer reader.Close()

	parser := proto.NewParser(reader)
	definition, err := parser.Parse()
	if err != nil {
		return fmt.Errorf("failed to parse proto file: %w", err)
	}

	proto.Walk(definition,
		proto.WithService(func(s *proto.Service) {
			cp.serviceMap[s.Name] = newClient(idlPath, s.Name)
		}),
	)

	return nil
}

func main() {
	h := server.Default(server.WithHostPorts("127.0.0.1:8080"))
	h.Use(cors.Default())

	protoFiles := []string{
		"hello.proto",
	}

	clientPool := NewClientPool(protoFiles)

	setupSwaggerRoutes(h)
	setupProxyRoutes(h, clientPool)

	hlog.Info("Swagger UI is available at: http://127.0.0.1:8080/swagger/index.html")
	h.Spin()
}

func setupSwaggerRoutes(h *server.Hertz) {
	h.GET("swagger/*any", swagger.WrapHandler(swaggerFiles.Handler, swagger.URL("/openapi.yaml")))

	h.GET("/:filename", func(c context.Context, ctx *app.RequestContext) {
		filename := ctx.Param("filename")

		if !strings.HasSuffix(filename, ".openapi.yaml") && filename != "openapi.yaml" {
			handleError(ctx, "Invalid file name", http.StatusBadRequest)
			return
		}

		data, err := files.ReadFile(filename)
		if err != nil {
			handleError(ctx, "File not found: "+filename, http.StatusNotFound)
			return
		}

		ctx.Header("Content-Type", "application/x-yaml")
		ctx.Write(data)
	})
}

func setupProxyRoutes(h *server.Hertz, cp *ClientPool) {
	h.Any("/:serviceName/:methodName", func(c context.Context, ctx *app.RequestContext) {
		serviceName := ctx.Param("serviceName")
		methodName := ctx.Param("methodName")

		if serviceName == "" || methodName == "" {
			handleError(ctx, "ServiceName or MethodName not provided", http.StatusBadRequest)
			return
		}

		cli, err := cp.getClient(serviceName)
		if err != nil {
			handleError(ctx, err.Error(), http.StatusNotFound)
			return
		}

		bodyBytes := ctx.Request.Body()

		queryMap := formatQueryParams(ctx)

		for k, v := range queryMap {
			if strings.HasPrefix(k, "p_") {
				c = metainfo.WithPersistentValue(c, k, v)
			} else {
				c = metainfo.WithValue(c, k, v)
			}
		}

		c = metainfo.WithBackwardValues(c)

		jReq := string(bodyBytes)

		jRsp, err := cli.GenericCall(c, methodName, jReq)
		if err != nil {
			hlog.Errorf("GenericCall error: %v", err)
			ctx.JSON(http.StatusInternalServerError, map[string]interface{}{
				"error": err.Error(),
			})
			return
		}

		result := make(map[string]interface{})
		if err := json.Unmarshal([]byte(jRsp.(string)), &result); err != nil {
			hlog.Errorf("Failed to unmarshal response body: %v", err)
			ctx.JSON(http.StatusInternalServerError, map[string]interface{}{
				"error": "Failed to unmarshal response body",
			})
			return
		}

		m := metainfo.RecvAllBackwardValues(c)

		for key, value := range m {
			result[key] = value
		}

		respBody, err := json.Marshal(result)
		if err != nil {
			hlog.Errorf("Failed to marshal response body: %v", err)
			ctx.JSON(http.StatusInternalServerError, map[string]interface{}{
				"error": "Failed to marshal response body",
			})
			return
		}

		ctx.Data(http.StatusOK, "application/json", respBody)
	})
}

func formatQueryParams(ctx *app.RequestContext) map[string]string {
	QueryParams := make(map[string]string)
	ctx.Request.URI().QueryArgs().VisitAll(func(key, value []byte) {
		QueryParams[string(key)] = string(value)
	})
	return QueryParams
}

func handleError(ctx *app.RequestContext, errMsg string, statusCode int) {
	hlog.Errorf("Error: %s", errMsg)
	ctx.JSON(statusCode, map[string]interface{}{
		"error": errMsg,
	})
}

func findPbFile(fileName string) (string, error) {
	workingDir, err := os.Getwd()
	if err != nil {
		return "", fmt.Errorf("failed to get working directory: %w", err)
	}

	foundPath := ""
	err = filepath.Walk(workingDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return fmt.Errorf("error walking through files: %w", err)
		}
		if !info.IsDir() && info.Name() == fileName {
			foundPath = path
			return filepath.SkipDir
		}
		return nil
	})

	if err == nil && foundPath != "" {
		return foundPath, nil
	}

	parentDir := filepath.Dir(workingDir)
	for parentDir != "/" && parentDir != "." && parentDir != workingDir {
		filePath := filepath.Join(parentDir, fileName)
		if _, err := os.Stat(filePath); err == nil {
			return filePath, fmt.Errorf("file found at: %s", filePath)
		}
		workingDir = parentDir
		parentDir = filepath.Dir(parentDir)
	}

	return "", errors.New("pb file not found: " + fileName)
}
